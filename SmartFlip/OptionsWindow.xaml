<Window
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xml:lang="en-US"
	xmlns:d="http://schemas.microsoft.com/expression/blend/2006" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="d"
	x:Class="SmartFlip.Window3"
	x:Name="Window"
	Title="SmartFlip Options"
	Width="680" Height="520" Background="#00000000" AllowsTransparency="True" WindowStartupLocation="CenterScreen" Left="0" ResizeMode="NoResize" Top="0" Loaded="OnWindowLoad" WindowStyle="None">

	<Window.Resources>

		<ResourceDictionary>
			<ResourceDictionary.MergedDictionaries>
				<ResourceDictionary Source="Simple Styles.xaml"/>
			</ResourceDictionary.MergedDictionaries>

			<!-- Used for background of ScrollViewer, TreeView, ListBox, Expander, TextBox, Tab Control -->
			<SolidColorBrush x:Key="WindowBackgroundBrush" Color="#FFF"/>

			<SolidColorBrush x:Key="SolidBorderBrush" Color="#888"/>
	
			<!-- NormalBrush is used as the Background for SimpleButton, SimpleRepeatButton -->
			<LinearGradientBrush x:Key="NormalBrush" EndPoint="0,1" StartPoint="0,0">
				<GradientStop Color="#EEE" Offset="0.0"/>
				<GradientStop Color="#CCC" Offset="1.0"/>
			</LinearGradientBrush>
			<LinearGradientBrush x:Key="NormalBorderBrush" EndPoint="0,1" StartPoint="0,0">
				<GradientStop Color="#CCC" Offset="0.0"/>
				<GradientStop Color="#444" Offset="1.0"/>
			</LinearGradientBrush>
	
			<!-- DefaultedBorderBrush is used to show KeyBoardFocus -->
			<LinearGradientBrush x:Key="DefaultedBorderBrush" EndPoint="0,1" StartPoint="0,0">
				<GradientStop Color="#777" Offset="0.0"/>
				<GradientStop Color="#000" Offset="1.0"/>
			</LinearGradientBrush>
	
			<!-- MouseOverBrush is used for MouseOver in Button, Radio Button, CheckBox -->
			<LinearGradientBrush x:Key="MouseOverBrush" EndPoint="0,1" StartPoint="0,0">
				<GradientStop Color="#FFF" Offset="0.0"/>
				<GradientStop Color="#AAA" Offset="1.0"/>
			</LinearGradientBrush>
	
			<!-- PressedBrush is used for Pressed in Button, Radio Button, CheckBox -->
			<LinearGradientBrush x:Key="PressedBrush" EndPoint="0,1" StartPoint="0,0">
				<GradientStop Color="#BBB" Offset="0.0"/>
				<GradientStop Color="#EEE" Offset="0.1"/>
				<GradientStop Color="#EEE" Offset="0.9"/>
				<GradientStop Color="#FFF" Offset="1.0"/>
			</LinearGradientBrush>
			<LinearGradientBrush x:Key="PressedBorderBrush" EndPoint="0,1" StartPoint="0,0">
				<GradientStop Color="#444" Offset="0.0"/>
				<GradientStop Color="#888" Offset="1.0"/>
			</LinearGradientBrush>

			<SolidColorBrush x:Key="DisabledBackgroundBrush" Color="#EEE"/>
			<SolidColorBrush x:Key="DisabledBorderBrush" Color="#AAA"/>	

			<!-- Disabled Brushes are used for the Disabled look of each control -->
			<SolidColorBrush x:Key="DisabledForegroundBrush" Color="#888"/>
	
			<!-- Simple Repeat Button - This is used by Simple ScrollBar for the up and down buttons -->
			<Style x:Key="SimpleRepeatButton" d:IsControlPart="True" TargetType="{x:Type RepeatButton}" BasedOn="{x:Null}">
				<Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
				<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type RepeatButton}">
							<Grid>
								<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
								<ContentPresenter HorizontalAlignment="Center" x:Name="ContentPresenter" VerticalAlignment="Center" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"/>
							</Grid>
							<ControlTemplate.Triggers>
								<Trigger Property="IsKeyboardFocused" Value="true">
									<Setter Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" TargetName="Border"/>
								</Trigger>
								<Trigger Property="IsMouseOver" Value="true">
									<Setter Property="Background" Value="{DynamicResource MouseOverBrush}" TargetName="Border"/>
								</Trigger>
								<Trigger Property="IsPressed" Value="true">
									<Setter Property="Background" Value="{DynamicResource PressedBrush}" TargetName="Border"/>
									<Setter Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" TargetName="Border"/>
								</Trigger>
								<Trigger Property="IsEnabled" Value="false">
									<Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
									<Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
									<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
	
			<!-- Simple ScrollRepeatButton Style - This RepeatButton is used above and below the Thumb in the Scrollbar. They are set to transparent si that they do not show over the scrollbar -->
			<Style x:Key="SimpleScrollRepeatButtonStyle" d:IsControlPart="True" TargetType="{x:Type RepeatButton}">
				<Setter Property="Background" Value="Transparent"/>
				<Setter Property="BorderBrush" Value="Transparent"/>
				<Setter Property="IsTabStop" Value="false"/>
				<Setter Property="Focusable" Value="false"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type RepeatButton}">
							<Grid>
								<Rectangle Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}"/>
							</Grid>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
	
			<!-- Simple Thumb - The Thumb is the draggable part of the Scrollbar -->
			<Style x:Key="SimpleThumbStyle" d:IsControlPart="True" TargetType="{x:Type Thumb}" BasedOn="{x:Null}">
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type Thumb}">
							<Grid Margin="0,0,0,0" x:Name="Grid">
								<Rectangle HorizontalAlignment="Stretch" x:Name="Rectangle" VerticalAlignment="Stretch" Width="Auto" Height="Auto" RadiusX="2" RadiusY="2" Fill="{DynamicResource NormalBrush}" Stroke="{DynamicResource NormalBorderBrush}"/>
							</Grid>
							<ControlTemplate.Triggers>
								<Trigger Property="IsFocused" Value="True"/>
								<Trigger Property="IsMouseOver" Value="True"/>
								<Trigger Property="IsEnabled" Value="False"/>
								<Trigger Property="IsDragging" Value="True"/>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
	
			<!-- Simple ScrollBar  This makes use of SimpleThumb, SimpleRepeatButton and SimpleScrollRepeatButton -->
	
			<Style x:Key="SimpleScrollBar" TargetType="{x:Type ScrollBar}">
				<Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
				<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ScrollBar}">
							<Grid x:Name="GridRoot" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Background="{TemplateBinding Background}">
								<Grid.RowDefinitions>
									<RowDefinition MaxHeight="18"/>
									<RowDefinition Height="0.00001*"/>
									<RowDefinition MaxHeight="18"/>
								</Grid.RowDefinitions>
						
								<RepeatButton x:Name="DecreaseRepeat" Style="{DynamicResource SimpleRepeatButton}" Command="ScrollBar.LineUpCommand">
									<Grid>
										<Path x:Name="DecreaseArrow" Stroke="{TemplateBinding Foreground}" StrokeThickness="1" Data="M 0 4 L 8 4 L 4 0 Z"/>
									</Grid>
								</RepeatButton>
						
								<!-- Track is a special layout container which sizes the thumb and the repeat button which do jump scrolling either side of it -->
								<Track Grid.Row="1" x:Name="PART_Track" Orientation="Vertical" IsDirectionReversed="true">
									<Track.Thumb>
										<Thumb Style="{DynamicResource SimpleThumbStyle}"/>
									</Track.Thumb>
									<Track.IncreaseRepeatButton>
										<RepeatButton x:Name="PageUp" Style="{DynamicResource SimpleScrollRepeatButtonStyle}" Command="ScrollBar.PageDownCommand"/>
									</Track.IncreaseRepeatButton>
									<Track.DecreaseRepeatButton>
										<RepeatButton x:Name="PageDown" Style="{DynamicResource SimpleScrollRepeatButtonStyle}" Command="ScrollBar.PageUpCommand"/>
									</Track.DecreaseRepeatButton>
								</Track>
						
								<RepeatButton Grid.Row="2" x:Name="IncreaseRepeat" Style="{DynamicResource SimpleRepeatButton}" Command="ScrollBar.LineDownCommand">
									<Grid>
										<Path x:Name="IncreaseArrow" Stroke="{TemplateBinding Foreground}" StrokeThickness="1" Data="M 0 0 L 4 4 L 8 0 Z"/>
									</Grid>
								</RepeatButton>
							</Grid>
					
							<!-- This uses a single template for ScrollBar and rotate it to be Horizontal
					It also changes the commands so that the it does Left and Right instead of Up and Down Commands -->
							<ControlTemplate.Triggers>
								<Trigger Property="Orientation" Value="Horizontal">

									<!-- Rotate the ScrollBar from Vertical to Horizontal -->
									<Setter Property="LayoutTransform" TargetName="GridRoot">
										<Setter.Value>
											<RotateTransform Angle="-90"/>
										</Setter.Value>
									</Setter>
							
									<!-- Track is bound to Orientation internally, so we need to rotate it back to Vertical -->
									<Setter TargetName="PART_Track" Property="Orientation" Value="Vertical"/>
					
									<!-- Change the commands to do Horizontal commands -->
									<Setter Property="Command" Value="ScrollBar.LineLeftCommand" TargetName="DecreaseRepeat"/>
									<Setter Property="Command" Value="ScrollBar.LineRightCommand" TargetName="IncreaseRepeat"/>
									<Setter Property="Command" Value="ScrollBar.PageLeftCommand" TargetName="PageDown"/>
									<Setter Property="Command" Value="ScrollBar.PageRightCommand" TargetName="PageUp"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
	
			<!-- Simple ScrollViewer 
	ScrollViewer is a Grid control which has a ContentPresenter and a Horizontal and Vertical ScrollBar 
	It is used by ListBox, MenuItem, ComboBox, and TreeView -->
			<Style x:Key="SimpleScrollViewer" TargetType="{x:Type ScrollViewer}" BasedOn="{x:Null}">
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ScrollViewer}">
							<Grid Background="{TemplateBinding Background}">
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="*"/>
									<ColumnDefinition Width="Auto"/>
								</Grid.ColumnDefinitions>
								<Grid.RowDefinitions>
									<RowDefinition Height="*"/>
									<RowDefinition Height="Auto"/>
								</Grid.RowDefinitions>
								<ScrollContentPresenter Grid.Column="0" Grid.Row="0" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" CanContentScroll="{TemplateBinding CanContentScroll}"/>
						
								<!-- The visibility of the ScrollBars is controlled by the implementation fo the control -->
								<ScrollBar Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Grid.Column="0" Grid.Row="1" x:Name="PART_HorizontalScrollBar" Style="{DynamicResource SimpleScrollBar}" Orientation="Horizontal" Value="{Binding Path=HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}" Minimum="0" Maximum="{TemplateBinding ScrollableWidth}" AutomationProperties.AutomationId="HorizontalScrollBar"/>
								<ScrollBar Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Grid.Column="1" Grid.Row="0" x:Name="PART_VerticalScrollBar" Style="{DynamicResource SimpleScrollBar}" Orientation="Vertical" Value="{Binding Path=VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}" Minimum="0" Maximum="{TemplateBinding ScrollableHeight}" AutomationProperties.AutomationId="VerticalScrollBar"/>
							</Grid>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
	
			<!-- Simple ListBox - This uses SimpleScrollViewer to allow items to be scrolled and SimpleListBoxItem to define the look of each item -->
			<Style x:Key="SimpleListBox" TargetType="{x:Type ListBox}">
				<Setter Property="SnapsToDevicePixels" Value="true"/>
				<Setter Property="Background" Value="{DynamicResource WindowBackgroundBrush}"/>
				<Setter Property="BorderBrush" Value="{DynamicResource SolidBorderBrush}"/>
				<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
				<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
				<Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ListBox}">
							<Grid>
								<Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="6,0,0,0"/>
								<ScrollViewer Margin="3,3,3,3" Style="{DynamicResource SimpleScrollViewer}" Focusable="false" Background="{TemplateBinding Background}">
							
									<!-- The StackPanel is used to display the children by setting IsItemsHost to be Trus -->
									<StackPanel Margin="2" IsItemsHost="true"/>
							
								</ScrollViewer>
							</Grid>
							<ControlTemplate.Triggers>
								<Trigger Property="IsEnabled" Value="false">
									<Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
									<Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
								</Trigger>
								<Trigger Property="IsGrouping" Value="true">
									<Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
	
			<SolidColorBrush Color="#FF8B8B8B" x:Key="ControlBorderColor"/>
			<SolidColorBrush Color="#FFEEEEEE" x:Key="FontColor"/>
	
			<!-- Used for Checkmark, Radio button, TreeViewItem, Expander ToggleButton glyphs -->
			<SolidColorBrush x:Key="GlyphBrush" Color="#444"/>
	
	
			<!-- Simple ListBoxItem - This is used for each Item in a ListBox. The item's content is placed in the ContentPresenter -->
	
			<Style x:Key="SimpleListBoxItem" d:IsControlPart="True" TargetType="{x:Type ListBoxItem}">
				<Setter Property="SnapsToDevicePixels" Value="true"/>
				<Setter Property="OverridesDefaultStyle" Value="true"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ListBoxItem}">
							<Grid SnapsToDevicePixels="true" Margin="0,0,0,0" ShowGridLines="False">
								<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" TextElement.Foreground="{TemplateBinding Foreground}" HorizontalAlignment="Stretch" Margin="0,0,0,0" VerticalAlignment="Top" Padding="0,8,0,8">
									<ContentPresenter HorizontalAlignment="Stretch" VerticalAlignment="Stretch" x:Name="contentPresenter" Margin="3,0,0,0"/>
								</Border>
								<Path Visibility="Hidden" Fill="#FFFFFFFF" Stretch="Fill" Stroke="#FF000000" HorizontalAlignment="Left" Margin="3,11.098,0,0" x:Name="path" VerticalAlignment="Top" Width="9" Height="13.163" Data="M8,8 L16,16 8,24 z"/>
							</Grid>
							<ControlTemplate.Triggers>
						
								<!-- Change IsSelected SelectedBackgroundBrush to set the selection color for the items -->
								<Trigger Property="IsSelected" Value="true">
									<Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="#FFFFFFFF"/>
									<Setter Property="CornerRadius" TargetName="Border" Value="2,2,2,2"/>
									<Setter Property="Margin" TargetName="contentPresenter" Value="20,0,0,0"/>
									<Setter Property="Background" TargetName="Border" Value="{DynamicResource ControlBorderColor}"/>
									<Setter Property="StrokeThickness" TargetName="path" Value="0"/>
									<Setter Property="Margin" TargetName="path" Value="5.321,0,0,0"/>
									<Setter Property="VerticalAlignment" TargetName="path" Value="Center"/>
									<Setter Property="HorizontalAlignment" TargetName="path" Value="Left"/>
									<Setter Property="Visibility" TargetName="path" Value="Visible"/>
									<Setter Property="Width" TargetName="path" Value="9"/>
									<Setter Property="Height" TargetName="path" Value="13.163"/>
									<Setter Property="Fill" TargetName="path" Value="{DynamicResource GlyphBrush}"/>
									<Setter Property="VerticalAlignment" TargetName="contentPresenter" Value="Stretch"/>
									<Setter Property="HorizontalAlignment" TargetName="contentPresenter" Value="Stretch"/>
								</Trigger>
						
								<Trigger Property="IsEnabled" Value="false">
									<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
	
			<!-- LightBrush is used for content areas such as Menu, Tab Control background -->
			<LinearGradientBrush x:Key="LightBrush" EndPoint="0,1" StartPoint="0,0">
				<GradientStop Color="#FFF" Offset="0.0"/>
				<GradientStop Color="#EEE" Offset="1.0"/>
			</LinearGradientBrush>
	
			<SolidColorBrush Color="#FFD4D2D2" x:Key="LightBackgroundColor"/>
			<SolidColorBrush Color="#FF626262" x:Key="DefaultBorderColor"/>
			<SolidColorBrush Color="#FFB2B2B2" x:Key="MOverBorderColor"/>
			<Brush x:Key="ControlBackground">#FF676767</Brush>
	
			<!--Simple Simple SliderThumb - The Thumb is the draggable part of a Slider-->
			<Style x:Key="SimpleSliderThumb" d:IsControlPart="True" TargetType="{x:Type Thumb}">
				<Setter Property="SnapsToDevicePixels" Value="true"/>
				<Setter Property="Height" Value="14"/>
				<Setter Property="Width" Value="14"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type Thumb}">
							<Grid>
								<Ellipse x:Name="Ellipse" Stroke="{DynamicResource DefaultBorderColor}" StrokeThickness="0.5">
									<Ellipse.Fill>
										<DynamicResource ResourceKey="LightBackgroundColor"/>
									</Ellipse.Fill>
								</Ellipse>
							</Grid>
							<ControlTemplate.Triggers>
								<Trigger Property="IsMouseOver" Value="True">
									<Setter Property="Stroke" TargetName="Ellipse" Value="{DynamicResource MOverBorderColor}"/>
									<Setter Property="Fill" TargetName="Ellipse" Value="#FFFFFFFF"/>
								</Trigger>
								<Trigger Property="IsEnabled" Value="false">
									<Setter Property="Fill" TargetName="Ellipse" Value="{DynamicResource ControlBackground}"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
	
			<!--Simple Simple Slider
	Similiar to ScrollBar this template uses Track to layout the draggable Thumb which has an up and down repeat button
	It uses Simple SliderThumb and SimpleScrollRepeatButtonStyle for the page up and down repeat buttons -->
			<Style x:Key="SimpleSlider" TargetType="{x:Type Slider}">
				<Setter Property="Background" Value="{DynamicResource LightBrush}"/>
				<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type Slider}">
							<Grid x:Name="GridRoot">
								<Grid.RowDefinitions>
									<RowDefinition Height="Auto"/>
									<RowDefinition Height="Auto" MinHeight="{TemplateBinding MinHeight}"/>
									<RowDefinition Height="Auto"/>
								</Grid.RowDefinitions>
						
								<!-- TickBar shows the ticks for Slider -->
								<TickBar Visibility="Collapsed" x:Name="TopTick" Height="4" SnapsToDevicePixels="True" Placement="Top" Fill="{DynamicResource GlyphBrush}"/>
								<Border Grid.Row="1" Margin="0" x:Name="Border" Height="4" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2" Background="{DynamicResource ControlBorderColor}"/>
						
								<!-- The Track lays out the repeat buttons and thumb -->
								<Track Grid.Row="1" x:Name="PART_Track">
									<Track.Thumb>
										<Thumb Style="{DynamicResource SimpleSliderThumb}" Background="#FFFFFFFF" Foreground="#FFEEEEEE" x:Name="thumb"/>
									</Track.Thumb>
									<Track.IncreaseRepeatButton>
										<RepeatButton Style="{DynamicResource SimpleScrollRepeatButtonStyle}" Command="Slider.IncreaseLarge"/>
									</Track.IncreaseRepeatButton>
									<Track.DecreaseRepeatButton>
										<RepeatButton Style="{DynamicResource SimpleScrollRepeatButtonStyle}" Command="Slider.DecreaseLarge"/>
									</Track.DecreaseRepeatButton>
								</Track>
						
								<TickBar Visibility="Collapsed" Grid.Row="2" x:Name="BottomTick" Height="4" SnapsToDevicePixels="True" Placement="Bottom" Fill="{TemplateBinding Foreground}"/>
							</Grid>
							<ControlTemplate.Triggers>
								<Trigger Property="TickPlacement" Value="TopLeft">
									<Setter Property="Visibility" Value="Visible" TargetName="TopTick"/>
								</Trigger>
								<Trigger Property="TickPlacement" Value="BottomRight">
									<Setter Property="Visibility" Value="Visible" TargetName="BottomTick"/>
								</Trigger>
								<Trigger Property="TickPlacement" Value="Both">
									<Setter Property="Visibility" Value="Visible" TargetName="TopTick"/>
									<Setter Property="Visibility" Value="Visible" TargetName="BottomTick"/>
								</Trigger>
								<Trigger Property="IsEnabled" Value="false">
									<Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
									<Setter Property="Background" TargetName="thumb" Value="#FFFFFFFF"/>
									<Setter Property="Foreground" TargetName="thumb" Value="#FFFFFFFF"/>
									<Setter Property="Background" TargetName="Border" Value="#FF676767"/>
								</Trigger>
						
								<!-- Use a rotation to create a Vertical Slider form the default Horizontal -->
								<Trigger Property="Orientation" Value="Vertical">
									<Setter Property="LayoutTransform" TargetName="GridRoot">
										<Setter.Value>
											<RotateTransform Angle="-90"/>
										</Setter.Value>
									</Setter>
									<!-- Track rotates itself based on orientation so need to force it back -->
									<Setter TargetName="PART_Track" Property="Orientation" Value="Horizontal"/>
								</Trigger>
						
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
	
			<SolidColorBrush Color="#FFB4B4B4" x:Key="DisabledFontColor"/>
	
			<!-- Simple TextBox -->
			<Style x:Key="SimpleTextBox" TargetType="{x:Type TextBox}">
				<Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
				<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
				<Setter Property="AllowDrop" Value="true"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type TextBox}">
							<Grid>
								<Border x:Name="Border" BorderThickness="0,0,0,0" Padding="1,1,1,1" CornerRadius="2" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding BorderBrush}">
							
									<!-- The implementation places the Content into the ScrollViewer. It must be named PART_ContentHost for the control to function -->
									<ScrollViewer Margin="0" x:Name="PART_ContentHost" Style="{DynamicResource SimpleScrollViewer}" Background="{TemplateBinding Background}"/>
						
								</Border>
							</Grid>
							<ControlTemplate.Triggers>
								<Trigger Property="IsEnabled" Value="False">
									<Setter Property="BorderBrush" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
									<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
									<Setter Property="Background" TargetName="Border" Value="{DynamicResource ControlBackground}"/>
									<Setter Property="Foreground" TargetName="PART_ContentHost" Value="#FFB4B4B4"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
	
			<Style x:Key="CheckBoxFocusVisual">
				<Setter Property="Control.Template">
					<Setter.Value>
						<ControlTemplate>
							<Border>
								<Rectangle Margin="15,0,0,0" Stroke="#60000000" StrokeThickness="1" StrokeDashArray="1 2"/>
							</Border>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
	
			<!-- Simple CheckBox -->
			<Style x:Key="SimpleCheckBox" TargetType="{x:Type CheckBox}">
				<Setter Property="SnapsToDevicePixels" Value="true"/>
				<Setter Property="FocusVisualStyle" Value="{DynamicResource CheckBoxFocusVisual}"/>
				<Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
				<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type CheckBox}">
					
							<!-- BulletDecorator is used to provide baseline alignment between the checkmark and the Content -->
							<BulletDecorator Background="Transparent">
								<BulletDecorator.Bullet>
									<Grid Width="13" Height="13" HorizontalAlignment="Left" Margin="0,0.5,0,0" x:Name="grid" VerticalAlignment="Center">
										<Border x:Name="Border" Background="{DynamicResource ControlBackground}" BorderBrush="#FF101010" BorderThickness="0.8,0.8,0.8,0.8"/>
										<Path x:Name="CheckMark" StrokeThickness="2" SnapsToDevicePixels="False" Data="M0,0L8,8 M0,8L8,0" HorizontalAlignment="Stretch" Margin="0,0,0,0" VerticalAlignment="Stretch" Width="8" Height="8" Grid.IsSharedSizeScope="False">
											<Path.Stroke>
												<DynamicResource ResourceKey="FontColor"/>
											</Path.Stroke>
										</Path>
									</Grid>
								</BulletDecorator.Bullet>
								<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" x:Name="contentPresenter" Margin="4,0,0,0"/>
							</BulletDecorator>
					
							<!-- This uses Visibility to hide and show the CheckMark on IsChecked -->
							<ControlTemplate.Triggers>
								<Trigger Property="IsChecked" Value="false">
									<Setter Property="Visibility" Value="Collapsed" TargetName="CheckMark"/>
								</Trigger>
								<Trigger Property="IsPressed" Value="true">
									<Setter Property="BorderBrush" TargetName="Border" Value="#FF1D1D1D"/>
									<Setter Property="Background" TargetName="Border" Value="{DynamicResource DisabledBorderBrush}"/>
									<Setter Property="Margin" TargetName="contentPresenter" Value="4,0,0,0"/>
									<Setter Property="VerticalAlignment" TargetName="grid" Value="Center"/>
									<Setter Property="Margin" TargetName="grid" Value="0,0.5,0,0"/>
									<Setter Property="HorizontalAlignment" TargetName="grid" Value="Left"/>
								</Trigger>
								<Trigger Property="IsEnabled" Value="false">
									<Setter Property="Stroke" TargetName="CheckMark" Value="{DynamicResource ControlBorderColor}"/>
									<Setter Property="BorderBrush" TargetName="Border" Value="{DynamicResource ControlBorderColor}"/>
								</Trigger>
							</ControlTemplate.Triggers>
					
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
	
			<!-- Simple ComboBox Toggle Button - This is used in ComboBox to expand and collapse the ComboBox Popup-->
			<ControlTemplate x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
				<Grid>
					<Grid.ColumnDefinitions>
						<ColumnDefinition/>
						<ColumnDefinition Width="20"/>
					</Grid.ColumnDefinitions>
					<Rectangle Grid.ColumnSpan="2" HorizontalAlignment="Stretch" x:Name="Rectangle" VerticalAlignment="Stretch" Width="Auto" Height="Auto" RadiusX="5" RadiusY="5" Fill="#FF8B8B8B" StrokeThickness="0"/>
					<Rectangle Grid.Column="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto" RadiusX="5" RadiusY="5" Fill="{DynamicResource ControlBackground}" x:Name="rectangle"/>
					<Path Grid.Column="1" HorizontalAlignment="Center" x:Name="Arrow" VerticalAlignment="Center" Fill="{DynamicResource FontColor}" Data="M 0 0 L 4 4 L 8 0 Z"/>
				</Grid>
				<ControlTemplate.Triggers>
					<Trigger Property="IsMouseOver" Value="true">
						<Setter Property="Fill" TargetName="Arrow" Value="{DynamicResource ControlBackground}"/>
						<Setter Property="StrokeThickness" TargetName="rectangle" Value="0"/>
						<Setter Property="Margin" TargetName="Rectangle" Value="0,0,0,0"/>
						<Setter Property="Fill" TargetName="Rectangle">
							<Setter.Value>
								<LinearGradientBrush EndPoint="1,0.5" StartPoint="0,0.5">
									<GradientStop Color="#FF676767" Offset="0"/>
									<GradientStop Color="#FFCBCBCB" Offset="0.169"/>
								</LinearGradientBrush>
							</Setter.Value>
						</Setter>
						<Setter Property="Fill" TargetName="rectangle" Value="#FF676767"/>
					</Trigger>
					<Trigger Property="IsChecked" Value="true">
						<Setter Property="Fill" TargetName="Arrow" Value="{DynamicResource ControlBackground}"/>
						<Setter Property="Fill" TargetName="Rectangle">
							<Setter.Value>
								<LinearGradientBrush EndPoint="1,0.5" StartPoint="0,0.5">
									<GradientStop Color="#FF676767" Offset="0"/>
									<GradientStop Color="#FFCBCBCB" Offset="0.146"/>
								</LinearGradientBrush>
							</Setter.Value>
						</Setter>
					</Trigger>
					<Trigger Property="IsEnabled" Value="False">
						<Setter Property="Stroke" Value="{DynamicResource DisabledBorderBrush}" TargetName="Rectangle"/>
						<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
						<Setter Property="Fill" Value="{DynamicResource DisabledForegroundBrush}" TargetName="Arrow"/>
						<Setter Property="Fill" TargetName="Rectangle" Value="{DynamicResource ControlBackground}"/>
					</Trigger>
				</ControlTemplate.Triggers>
			</ControlTemplate>
	
			<!-- This is the area which contains the selected item in the ComboBox -->
	
			<ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
				<!-- This must be named as PART_ContentHost -->
				<Border x:Name="PART_ContentHost" Focusable="False" Background="{TemplateBinding Background}"/>
			</ControlTemplate>
	
			<!-- Simple ComboBox 
	This uses the ComboBoxToggleButton to expand and collapse a Popup control
	SimpleScrollViewer to allow items to be scrolled and SimpleComboBoxItem to define the look of each item 
	The Popup shows a list of items in a StackPanel-->
	
			<Style x:Key="SimpleComboBox" TargetType="{x:Type ComboBox}">
				<Setter Property="SnapsToDevicePixels" Value="true"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ComboBox}">
							<Grid>
								<!-- The ToggleButton is databound to the ComboBox itself to toggle IsDropDownOpen -->
								<ToggleButton Grid.Column="2" Template="{DynamicResource ComboBoxToggleButton}" x:Name="ToggleButton" Focusable="false" IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press"/>
								<ContentPresenter HorizontalAlignment="Left" Margin="3,3,23,3" x:Name="ContentSite" VerticalAlignment="Center" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" IsHitTestVisible="False"/>
						
								<!-- The TextBox must be named PART_EditableTextBox or ComboBox will not recognize it -->
								<TextBox Visibility="Hidden" Template="{DynamicResource ComboBoxTextBox}" HorizontalAlignment="Left" Margin="3,3,23,3" x:Name="PART_EditableTextBox" Style="{x:Null}" VerticalAlignment="Center" Focusable="True" Background="Transparent" IsReadOnly="{TemplateBinding IsReadOnly}"/>
						
								<!-- The Popup shows the list of items in the ComboBox. IsOpen is databound to IsDropDownOpen which is toggled via the ComboBoxToggleButton -->
								<Popup IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" x:Name="Popup" Focusable="False" AllowsTransparency="True" PopupAnimation="Slide">
									<Grid MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{TemplateBinding ActualWidth}" x:Name="DropDown" SnapsToDevicePixels="True">
										<Border x:Name="DropDownBorder" Background="{DynamicResource ControlBackground}" BorderThickness="1"/>
										<ScrollViewer Margin="4,6,4,6" Style="{DynamicResource SimpleScrollViewer}" SnapsToDevicePixels="True" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" CanContentScroll="True">
							
											<!-- The StackPanel is used to display the children by setting IsItemsHost to be True -->
											<StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" TextElement.Foreground="#FF000000"/>
								
										</ScrollViewer>
									</Grid>
								</Popup>
							</Grid>
							<ControlTemplate.Triggers>						
								<!-- This forces the DropDown to have a minimum size if it is empty -->
								<Trigger Property="HasItems" Value="false">
									<Setter Property="MinHeight" Value="95" TargetName="DropDownBorder"/>
								</Trigger>
								<Trigger Property="IsEnabled" Value="false">
									<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
								</Trigger>
								<Trigger Property="IsGrouping" Value="true">
									<Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
								</Trigger>
								<Trigger Property="AllowsTransparency" SourceName="Popup" Value="true">
									<Setter Property="CornerRadius" Value="4" TargetName="DropDownBorder"/>
									<Setter Property="Margin" Value="0,2,0,0" TargetName="DropDownBorder"/>
								</Trigger>
								<Trigger Property="IsEditable" Value="true">
									<Setter Property="IsTabStop" Value="false"/>
									<Setter Property="Visibility" Value="Visible" TargetName="PART_EditableTextBox"/>
									<Setter Property="Visibility" Value="Hidden" TargetName="ContentSite"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
	
			<!-- Simple ComboBoxItem - This is used for each item inside of the ComboBox. You can change the selected color of each item below-->
			<Style x:Key="SimpleComboBoxItem" d:IsControlPart="True" TargetType="{x:Type ComboBoxItem}">
				<Setter Property="SnapsToDevicePixels" Value="true"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ComboBoxItem}">
							<Grid SnapsToDevicePixels="true">
								<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
								<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="3,0,0,0" x:Name="contentPresenter" TextElement.Foreground="#FFEEEEEE"/>
							</Grid>
							<ControlTemplate.Triggers>
					
								<!-- Change IsHighlighted SelectedBackgroundBrush to set the selection color for the items -->
								<Trigger Property="IsHighlighted" Value="true">
									<Setter Property="Background" TargetName="Border" Value="{DynamicResource DisabledBorderBrush}"/>
									<Setter Property="CornerRadius" TargetName="Border" Value="2,2,2,2"/>
									<Setter Property="Margin" TargetName="contentPresenter" Value="3,0,0,0"/>
									<Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="#FF000000"/>
								</Trigger>
						
								<Trigger Property="IsEnabled" Value="false">
									<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
	
		</ResourceDictionary>
	
	</Window.Resources>

	<Grid x:Name="LayoutRoot">
		<Border BorderBrush="#FF555555" BorderThickness="1.5,1.5,1.5,1.5" CornerRadius="8,8,0,0" Background="#99000000">
			<Image Opacity="1" HorizontalAlignment="Left" VerticalAlignment="Top" Width="678.5" Height="166.5" TextElement.Foreground="#D8000000" Margin="0,0,0,0" Source="Resources/OptionsBackground.png" Stretch="Fill" StretchDirection="Both"/>
		</Border>
		<Grid Margin="8,60,8,40" x:Name="OptionsHost">
			<ListBox Style="{DynamicResource SimpleListBox}" Width="180" Background="#FF424141" BorderBrush="{DynamicResource ControlBorderColor}" FontSize="14" FontWeight="Normal" Foreground="{DynamicResource FontColor}" IsSynchronizedWithCurrentItem="True" d:LayoutOverrides="Margin" HorizontalAlignment="Left" Margin="-1,-0.058,0,0" x:Name="CategoryList" SelectionChanged="CategoryChanged">
				<ListBoxItem Style="{DynamicResource SimpleListBoxItem}" Content="General"/>
				<ListBoxItem Style="{DynamicResource SimpleListBoxItem}" Content="Events"/>
				<ListBoxItem Style="{DynamicResource SimpleListBoxItem}" Content="Triggers"/>
				<ListBoxItem Style="{DynamicResource SimpleListBoxItem}" Content="About"/>
			</ListBox>
			<Grid x:Name="TriggersPanel" IsEnabled="True" Visibility="Visible" Margin="177.533,-0.058,0,0">
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="*"/>
					<ColumnDefinition Width="0*"/>
				</Grid.ColumnDefinitions>
				<Border HorizontalAlignment="Stretch" Margin="0,0,0,0" VerticalAlignment="Stretch" Background="#FF424141" BorderBrush="#FF8B8B8B" BorderThickness="1,1,1,1" CornerRadius="0,6,0,0" Padding="8,8,8,8"/>
				<TabControl Style="{DynamicResource SimpleTabControl}" IsSynchronizedWithCurrentItem="True" Margin="1,3,1,1" Background="#FFFFFFFF" BorderBrush="#008C8E94">
					<TabItem Style="{DynamicResource SimpleTabItem}" Header="Keyboard">
						<Grid>
							<RadioButton HorizontalAlignment="Left" Margin="8,40,0,0" x:Name="WinTabOptionbox" Style="{DynamicResource SimpleRadioButton}" VerticalAlignment="Top" Width="216" Height="24" Foreground="{DynamicResource FontColor}" Content="Replace Windows-TAB combination" Click="WinTabClicked"/>
							<CheckBox IsEnabled="True" Style="{DynamicResource SimpleCheckBox}" Content="Select zoomed window when releasing Windows key" Foreground="{DynamicResource FontColor}" x:Name="SelectZoomedCheckbox" Margin="25.467,62.098,19,0" VerticalAlignment="Top" Height="16"/>
							<RadioButton Style="{DynamicResource SimpleRadioButton}" Width="216" Height="24" Foreground="{DynamicResource FontColor}" Content="Use other key combination" HorizontalAlignment="Left" Margin="8,94.098,0,0" x:Name="OtherKeyOptionbox" VerticalAlignment="Top" Click="OtherKeyClicked"/>
							<TextBlock HorizontalAlignment="Left" Margin="25.467,119.098,0,0" x:Name="KeyTextblock" VerticalAlignment="Top" Width="32" Height="20" Foreground="{DynamicResource FontColor}" Text="Key" TextWrapping="Wrap"/>
							<CheckBox IsEnabled="True" Style="{DynamicResource SimpleCheckBox}" Content="Use Shift key" Foreground="{DynamicResource FontColor}" x:Name="ShiftCheckbox" Height="16" HorizontalAlignment="Left" Margin="25.467,147.098,0,0" VerticalAlignment="Top" Width="104"/>
							<CheckBox IsEnabled="True" Style="{DynamicResource SimpleCheckBox}" Content="Use Alt key" Foreground="{DynamicResource FontColor}" x:Name="AltCheckbox" Height="16" HorizontalAlignment="Left" Margin="25.467,167.098,0,0" VerticalAlignment="Top" Width="90.533" IsChecked="False"/>
							<CheckBox IsEnabled="True" Style="{DynamicResource SimpleCheckBox}" Content="Use Control (Ctrl) key" Foreground="{DynamicResource FontColor}" x:Name="CtrlCheckbox" HorizontalAlignment="Left" Margin="25.467,187.098,0,184" Width="160"/>
							<ComboBox IsEnabled="True" Style="{DynamicResource SimpleComboBox}" Height="22" Background="#FF535353" BorderBrush="#FFFF0000" Foreground="{DynamicResource FontColor}" IsSynchronizedWithCurrentItem="True" x:Name="KeyCombobox" Margin="57.467,117.098,211,0" VerticalAlignment="Top" ItemContainerStyle="{StaticResource SimpleComboBoxItem}">
								<ComboBoxItem Content="ComboBoxItem"/>
							</ComboBox>
							<TextBlock Foreground="{DynamicResource FontColor}" Text="All windows" TextWrapping="Wrap" Width="180.523" HorizontalAlignment="Left" Margin="8,8,0,0" VerticalAlignment="Top" Height="24"/>
							<TextBlock Foreground="{DynamicResource FontColor}" Text="Windows from same application" TextWrapping="Wrap" Width="180.523" HorizontalAlignment="Left" Margin="8,0,0,139" VerticalAlignment="Bottom" Height="24"/>
							<TextBlock x:Name="KeyTextblock_Copy" Width="32" Foreground="{DynamicResource FontColor}" Text="Key" TextWrapping="Wrap" HorizontalAlignment="Left" Margin="25.467,0,0,108" VerticalAlignment="Bottom" Height="20"/>
							<CheckBox IsEnabled="True" Style="{DynamicResource SimpleCheckBox}" Content="Use Shift key" Foreground="{DynamicResource FontColor}" x:Name="ShiftCheckbox2" Width="104" HorizontalAlignment="Left" Margin="25.467,0,0,84" VerticalAlignment="Bottom" Height="16"/>
							<CheckBox IsEnabled="True" Style="{DynamicResource SimpleCheckBox}" Content="Use Alt key" Foreground="{DynamicResource FontColor}" x:Name="AltCheckbox2" Width="90.533" IsChecked="False" HorizontalAlignment="Left" Margin="25.467,0,0,64" VerticalAlignment="Bottom" Height="16"/>
							<CheckBox IsEnabled="True" Style="{DynamicResource SimpleCheckBox}" Content="Use Control (Ctrl) key" Foreground="{DynamicResource FontColor}" x:Name="CtrlCheckbox2" Width="160" HorizontalAlignment="Left" Margin="25.467,0,0,44" VerticalAlignment="Bottom" Height="16"/>
							<ComboBox IsEnabled="True" Style="{DynamicResource SimpleComboBox}" Background="#FF535353" BorderBrush="#FFFF0000" Foreground="{DynamicResource FontColor}" IsSynchronizedWithCurrentItem="True" x:Name="KeyCombobox2" ItemContainerStyle="{StaticResource SimpleComboBoxItem}" Margin="57.467,0,211,108" VerticalAlignment="Bottom" Height="22">
								<ComboBoxItem Content="ComboBoxItem"/>
							</ComboBox>
							<Path Stretch="Fill" Data="M5.467,28 L477.467,28" Margin="2,0,-2,169.884" VerticalAlignment="Bottom" Height="1">
								<Path.Stroke>
									<LinearGradientBrush EndPoint="1,0.5" StartPoint="0,0.5">
										<GradientStop Color="#FF5E5E5E" Offset="0.641"/>
										<GradientStop Color="#FF424141" Offset="1"/>
										<GradientStop Color="#FF5E5E5E" Offset="0.421"/>
										<GradientStop Color="#FF424141" Offset="0"/>
									</LinearGradientBrush>
								</Path.Stroke>
							</Path>
						</Grid>
					</TabItem>
					<TabItem Style="{DynamicResource SimpleTabItem}" Header="Mouse" IsSelected="False" x:Name="MouseTriggerTab" MouseUp="MouseTriggerTabUp">
						<Grid>
							<Grid.RowDefinitions>
								<RowDefinition Height="152.13"/>
								<RowDefinition Height="*"/>
								<RowDefinition Height="211"/>
							</Grid.RowDefinitions>
							<Grid HorizontalAlignment="Center" Margin="0,23.968,0,0" x:Name="VirtualMonitor" VerticalAlignment="Top" Width="247.234" Height="180" Grid.Row="1" Grid.RowSpan="2">
								<Border Margin="0,0,0,0" Background="#FF676767" BorderBrush="{DynamicResource DisabledBorderBrush}" BorderThickness="2,2,2,2">
									<Canvas Width="Auto" Height="Auto" MouseMove="MouseRegionMouseMove">
										<Rectangle Fill="#FFE4E4E4" x:Name="MouseRegion" Width="80" Height="40" Canvas.Left="29.234" Canvas.Top="26.951" Cursor="SizeAll" MouseDown="MouseRegionDown" MouseUp="MouseRegionMouseUp">
											<Rectangle.BitmapEffect>
												<DropShadowBitmapEffect ShadowDepth="2" Opacity="1"/>
											</Rectangle.BitmapEffect>
										</Rectangle>
									</Canvas>
								</Border>
								<Path Stretch="Fill" Stroke="#FFC5AE00" StrokeThickness="3" Height="12.848" Data="M129.467,328.098 L129.467,339.94609 141.11256,339.94609" Cursor="Hand" HorizontalAlignment="Left" Margin="-6,0,0,-6" x:Name="LeftBottom" ToolTip="Set window zone to bottom-left of screen" VerticalAlignment="Bottom" Width="12.646" MouseUp="LeftBottomClicked"/>
								<Path Stretch="Fill" Stroke="#FFC5AE00" StrokeThickness="3" Data="M129.467,328.098 L129.467,339.94609 141.11256,339.94609" Cursor="Hand" x:Name="LeftUp" Width="12.646" RenderTransformOrigin="0.5,0.5" HorizontalAlignment="Left" Margin="-6,-6,0,0" ToolTip="Set window zone to up-left of screen" VerticalAlignment="Top" Height="12.848" MouseUp="LeftUpClicked">
									<Path.RenderTransform>
										<TransformGroup>
											<ScaleTransform ScaleX="1" ScaleY="-1"/>
											<SkewTransform AngleX="0" AngleY="0"/>
											<RotateTransform Angle="0"/>
											<TranslateTransform X="0" Y="0"/>
										</TransformGroup>
									</Path.RenderTransform>
								</Path>
								<Path Stretch="Fill" Stroke="#FFC5AE00" StrokeThickness="3" Height="12.848" Data="M129.467,328.098 L129.467,339.94609 141.11256,339.94609" Cursor="Hand" x:Name="RightBottom" Width="12.646" RenderTransformOrigin="0.5,0.5" HorizontalAlignment="Right" Margin="0,0,-6,-6" ToolTip="Set window zone to bottom-right of screen" VerticalAlignment="Bottom" MouseUp="RightBottomClicked">
									<Path.RenderTransform>
										<TransformGroup>
											<ScaleTransform ScaleX="-1" ScaleY="1"/>
											<SkewTransform AngleX="0" AngleY="0"/>
											<RotateTransform Angle="0"/>
											<TranslateTransform X="0" Y="0"/>
										</TransformGroup>
									</Path.RenderTransform>
								</Path>
								<Path Stretch="Fill" Stroke="#FFC5AE00" StrokeThickness="3" Data="M129.467,328.098 L129.467,339.94609 141.11256,339.94609" Cursor="Hand" x:Name="RightUp" RenderTransformOrigin="0.5,0.5" HorizontalAlignment="Right" Margin="0,-6,-6,0" ToolTip="Set window zone to top-right of screen" VerticalAlignment="Top" Width="12.646" Height="12.848" MouseUp="RightUpClicked">
									<Path.RenderTransform>
										<TransformGroup>
											<ScaleTransform ScaleX="-1" ScaleY="-1"/>
											<SkewTransform AngleX="0" AngleY="0"/>
											<RotateTransform Angle="0"/>
											<TranslateTransform X="0" Y="0"/>
										</TransformGroup>
									</Path.RenderTransform>
								</Path>
							</Grid>
							<CheckBox IsEnabled="True" Style="{DynamicResource SimpleCheckBox}" Content="Use mouse to start SmartFlip" Foreground="{DynamicResource FontColor}" x:Name="MouseTriggerCheckbox" Height="16" Margin="8,40,36.467,0" VerticalAlignment="Top" Click="MouseTriggerClicked"/>
							<TextBlock HorizontalAlignment="Left" Margin="25.467,60,0,0" VerticalAlignment="Top" Width="Auto" Height="Auto" Text="Screen region:" TextWrapping="Wrap" x:Name="ScreenZoneTextblock"/>
							<TextBlock Width="Auto" Height="Auto" Text="Left" TextWrapping="Wrap" HorizontalAlignment="Left" Margin="105.467,60,0,0" VerticalAlignment="Top" x:Name="LeftTextblock"/>
							<TextBlock Width="Auto" Height="Auto" Text="Top" TextWrapping="Wrap" HorizontalAlignment="Left" Margin="105.467,0,0,53.21" x:Name="TopTextblock" d:LayoutOverrides="Height" VerticalAlignment="Bottom"/>
							<TextBlock Width="Auto" Height="Auto" Text="Width" TextWrapping="Wrap" d:LayoutOverrides="Height" HorizontalAlignment="Left" Margin="105.467,0,0,30.218" x:Name="WidthTextblock" VerticalAlignment="Bottom"/>
							<TextBlock Width="Auto" Height="Auto" Text="Height" TextWrapping="Wrap" d:LayoutOverrides="Height" HorizontalAlignment="Left" Margin="105.467,0,0,7.258" VerticalAlignment="Bottom" x:Name="HeightTextblock"/>
							<Slider Style="{DynamicResource SimpleSlider}" Height="Auto" SelectionStart="0" Maximum="100" Visibility="Visible" IsEnabled="True" LargeChange="25" SmallChange="1" Minimum="0" Value="20" x:Name="LeftSlider" ValueChanged="LeftSliderChanged" d:LayoutOverrides="Height" Margin="153.467,60.96,67,0" VerticalAlignment="Top"/>
							<TextBox Style="{DynamicResource SimpleTextBox}" Background="{DynamicResource ControlBackground}" BorderBrush="{DynamicResource ControlBorderColor}" Foreground="{DynamicResource FontColor}" Text="" TextWrapping="Wrap" FontSize="13" Visibility="Visible" x:Name="LeftTextbox" TextChanged="LeftTextChanged" HorizontalAlignment="Right" Margin="0,56.923,8,73.207" Width="47.944"/>
							<Slider Style="{DynamicResource SimpleSlider}" Height="Auto" SelectionStart="0" Maximum="100" Visibility="Visible" IsEnabled="True" LargeChange="25" SmallChange="1" Minimum="0" Value="20" x:Name="TopSlider" ValueChanged="TopSliderChanged" d:LayoutOverrides="Height" Margin="153.467,0,67,53.21" VerticalAlignment="Bottom"/>
							<TextBox Style="{DynamicResource SimpleTextBox}" Background="{DynamicResource ControlBackground}" BorderBrush="{DynamicResource ControlBorderColor}" Foreground="{DynamicResource FontColor}" Text="" TextWrapping="Wrap" FontSize="13" Visibility="Visible" x:Name="TopTextbox" TextChanged="TopTextChanged" Width="47.944" HorizontalAlignment="Right" Margin="0,0,8,49.247" VerticalAlignment="Bottom" Height="22"/>
							<Slider Style="{DynamicResource SimpleSlider}" Height="Auto" SelectionStart="0" Maximum="100" Visibility="Visible" IsEnabled="True" LargeChange="25" SmallChange="1" Minimum="0" Value="20" x:Name="WidthSlider" ValueChanged="WidthSliderChanged" d:LayoutOverrides="Height" Margin="153.467,0,67,29.17" VerticalAlignment="Bottom"/>
							<TextBox Style="{DynamicResource SimpleTextBox}" Background="{DynamicResource ControlBackground}" BorderBrush="{DynamicResource ControlBorderColor}" Foreground="{DynamicResource FontColor}" Text="" TextWrapping="Wrap" FontSize="13" Visibility="Visible" x:Name="WidthTextbox" TextChanged="WidthTextChanged" Width="47.944" HorizontalAlignment="Right" Margin="0,0,8,25.207" VerticalAlignment="Bottom" Height="22"/>
							<Slider Style="{DynamicResource SimpleSlider}" Height="Auto" SelectionStart="0" Maximum="100" Visibility="Visible" IsEnabled="True" LargeChange="25" SmallChange="1" Minimum="0" Value="20" x:Name="HeightSlider" ValueChanged="HeightSliderChanged" d:LayoutOverrides="Height" Margin="153.467,0,67,5.17" VerticalAlignment="Bottom"/>
							<TextBox Style="{DynamicResource SimpleTextBox}" Background="{DynamicResource ControlBackground}" BorderBrush="{DynamicResource ControlBorderColor}" Foreground="{DynamicResource FontColor}" Text="" TextWrapping="Wrap" FontSize="13" Visibility="Visible" x:Name="HeightTextbox" TextChanged="HeightTextChanged" Width="47.944" HorizontalAlignment="Right" Margin="0,0,8,1.207" VerticalAlignment="Bottom" Height="22"/>
							<Canvas HorizontalAlignment="Right" Margin="0,23.968,0,0" Width="139" Grid.Row="1" Grid.RowSpan="2"/>
							<ComboBox IsEnabled="True" Style="{DynamicResource SimpleComboBox}" Background="#FF535353" BorderBrush="#FFFF0000" Foreground="{DynamicResource FontColor}" IsSynchronizedWithCurrentItem="True" x:Name="KeyCombobox_Copy" ItemContainerStyle="{StaticResource SimpleComboBoxItem}" HorizontalAlignment="Left" Margin="8,8,0,0" VerticalAlignment="Top" Width="209.467" Height="22" SelectedIndex="0" IsDropDownOpen="True" IsEditable="False" IsReadOnly="False">
								<ComboBoxItem Content="All windows"/>
								<ComboBoxItem Content="Windows from same application"/>
							</ComboBox>
						</Grid>
					</TabItem>
					<TabItem Style="{DynamicResource SimpleTabItem}" Header="Voice">
						<Grid>
							<TextBlock HorizontalAlignment="Center" Margin="8,166.098,8,171" VerticalAlignment="Center" FontSize="20" FontWeight="Normal" Foreground="#FF949494" Text="Coming soon !" TextWrapping="Wrap"/>
						</Grid>
					</TabItem>
				</TabControl>
			</Grid>
			<Grid d:LayoutOverrides="Margin" Margin="177.533,-0.058,0,0" x:Name="EventsPanel">
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="0.044*"/>
					<ColumnDefinition Width="0.181*"/>
					<ColumnDefinition Width="0.643*"/>
					<ColumnDefinition Width="0.132*"/>
					<ColumnDefinition Width="0*"/>
				</Grid.ColumnDefinitions>
				<Border HorizontalAlignment="Stretch" Margin="0,0,0,0" VerticalAlignment="Stretch" Background="#FF424141" BorderBrush="#FF8B8B8B" BorderThickness="1,1,1,1" CornerRadius="0,6,0,0" Padding="8,8,8,8" d:LayoutOverrides="GridBox" Grid.ColumnSpan="5"/>
				<Slider Style="{DynamicResource SimpleSlider}" Margin="0,35.96,64.082,0" Height="Auto" SelectionStart="0" Maximum="5000" Visibility="Visible" IsEnabled="True" LargeChange="250" SmallChange="50" d:LayoutOverrides="Height" VerticalAlignment="Top" Grid.Column="2" Grid.ColumnSpan="2" x:Name="WindowPlacementSlider" ValueChanged="WindowPlacementSliderChanged"/>
				<TextBox Style="{DynamicResource SimpleTextBox}" Background="{DynamicResource ControlBackground}" BorderBrush="{DynamicResource ControlBorderColor}" Foreground="{DynamicResource FontColor}" Text="100" TextWrapping="Wrap" Margin="8,30.923,8,0" FontSize="13" Visibility="Visible" VerticalAlignment="Top" Height="22" Grid.Column="3" x:Name="WindowPlacementTextbox" TextChanged="WindowPlacementTextboxChanged"/>
				<CheckBox IsEnabled="True" Style="{DynamicResource SimpleCheckBox}" Content="Animate window placement on start" Foreground="{DynamicResource FontColor}" d:LayoutOverrides="Margin" Margin="8,8,61.367,0" VerticalAlignment="Top" Height="16" Grid.ColumnSpan="3" x:Name="WindowPlacementCheckbox" Click="WindowPlacementClick"/>
				<TextBlock d:LayoutOverrides="Width" Margin="3,34,3,0" VerticalAlignment="Top" Width="Auto" Height="Auto" Grid.Column="1" Foreground="{DynamicResource FontColor}" Text="Duration (ms)" TextWrapping="Wrap" x:Name="Duration1"/>
				<Slider Style="{DynamicResource SimpleSlider}" Height="Auto" SelectionStart="0" Maximum="5000" Visibility="Visible" IsEnabled="True" LargeChange="250" SmallChange="50" Grid.Column="1" d:LayoutOverrides="GridBox" Margin="87.87,95.96,0,0" VerticalAlignment="Top" Grid.ColumnSpan="2" x:Name="WindowFlipSlider" ValueChanged="WindowFlipSliderChanged"/>
				<TextBox Style="{DynamicResource SimpleTextBox}" Background="{DynamicResource ControlBackground}" BorderBrush="{DynamicResource ControlBorderColor}" Foreground="{DynamicResource FontColor}" Text="100" TextWrapping="Wrap" FontSize="13" Visibility="Visible" Height="22" Grid.Column="3" Margin="8,90.923,8,0" VerticalAlignment="Top" x:Name="WindowFlipTextbox" TextChanged="WindowFlipTextboxChanged"/>
				<CheckBox IsEnabled="True" Style="{DynamicResource SimpleCheckBox}" Content="Animate window flip" Foreground="{DynamicResource FontColor}" Height="16" Grid.ColumnSpan="3" d:LayoutOverrides="Margin" Margin="8,68,61.367,0" VerticalAlignment="Top" x:Name="WindowFlipCheckbox" Click="WindowFlipClick"/>
				<TextBlock Width="Auto" Height="Auto" Grid.Column="1" Foreground="{DynamicResource FontColor}" Text="Duration (ms)" TextWrapping="Wrap" d:LayoutOverrides="Width, Margin" Margin="3,94,3,0" VerticalAlignment="Top" x:Name="Duration2"/>
				<Slider Style="{DynamicResource SimpleSlider}" Height="Auto" SelectionStart="0" Maximum="5000" Visibility="Visible" IsEnabled="True" LargeChange="250" SmallChange="50" Grid.Column="1" d:LayoutOverrides="GridBox" Margin="87.87,159.96,0,0" VerticalAlignment="Top" Grid.ColumnSpan="2" x:Name="WindowOnTopSlider" ValueChanged="WindowOnTopSliderChanged"/>
				<TextBox Style="{DynamicResource SimpleTextBox}" Background="{DynamicResource ControlBackground}" BorderBrush="{DynamicResource ControlBorderColor}" Foreground="{DynamicResource FontColor}" Text="100" TextWrapping="Wrap" FontSize="13" Visibility="Visible" Height="22" Grid.Column="3" Margin="8,154.923,8,0" VerticalAlignment="Top" x:Name="WindowOnTopTextbox" TextChanged="WindowOnTopTextboxChanged"/>
				<CheckBox IsEnabled="True" Style="{DynamicResource SimpleCheckBox}" Content="Animate briging windows on top" Foreground="{DynamicResource FontColor}" Height="16" Grid.ColumnSpan="3" d:LayoutOverrides="Margin" Margin="8,132,61.367,0" VerticalAlignment="Top" x:Name="WindowOnTopCheckbox" Click="WindowOnTopClick"/>
				<TextBlock Width="Auto" Height="Auto" Grid.Column="1" Foreground="{DynamicResource FontColor}" Text="Duration (ms)" TextWrapping="Wrap" d:LayoutOverrides="Width, Margin" Margin="3,158,3,0" VerticalAlignment="Top" x:Name="Duration3"/>
				<Slider Style="{DynamicResource SimpleSlider}" Height="Auto" SelectionStart="0" Maximum="5000" Visibility="Visible" IsEnabled="True" LargeChange="250" SmallChange="50" Grid.Column="1" d:LayoutOverrides="Height" Margin="87.869,0,0,184" VerticalAlignment="Bottom" Grid.ColumnSpan="2" x:Name="WindowSelectionSlider" ValueChanged="WindowSelectionSliderChanged"/>
				<TextBox Style="{DynamicResource SimpleTextBox}" Background="{DynamicResource ControlBackground}" BorderBrush="{DynamicResource ControlBorderColor}" Foreground="{DynamicResource FontColor}" Text="100" TextWrapping="Wrap" FontSize="13" Visibility="Visible" Grid.Column="3" Margin="8,0,8,181.037" VerticalAlignment="Bottom" Height="22" x:Name="WindowSelectionTextbox" TextChanged="WindowSelectionTextboxChanged"/>
				<CheckBox IsEnabled="True" Style="{DynamicResource SimpleCheckBox}" Content="Animate window selection" Foreground="{DynamicResource FontColor}" Grid.ColumnSpan="3" d:LayoutOverrides="Margin" Margin="8,194.04,61.367,201.96" x:Name="WindowSelectionCheckbox" Click="WindowSelectionClick"/>
				<TextBlock Width="Auto" Height="Auto" Foreground="{DynamicResource FontColor}" Text="Duration (ms)" TextWrapping="Wrap" d:LayoutOverrides="Width, Height" Margin="3,0,3,184" VerticalAlignment="Bottom" Grid.Column="1" x:Name="Duration4"/>
				<CheckBox IsEnabled="True" Style="{DynamicResource SimpleCheckBox}" Content="Animate all window" Foreground="{DynamicResource FontColor}" Grid.ColumnSpan="2" Margin="3,0,45.006,160" VerticalAlignment="Bottom" Height="16" Grid.Column="1" x:Name="AllWindowsCheckbox" Click="AllWindowsClick"/>
				<Path Stretch="Fill" Data="M5.467,28 L477.467,28" Grid.ColumnSpan="4" Margin="2,61.687,8,0" VerticalAlignment="Top" Height="1">
					<Path.Stroke>
						<LinearGradientBrush EndPoint="1,0.5" StartPoint="0,0.5">
							<GradientStop Color="#FF5E5E5E" Offset="0.641"/>
							<GradientStop Color="#FF424141" Offset="1"/>
							<GradientStop Color="#FF5E5E5E" Offset="0.421"/>
							<GradientStop Color="#FF424141" Offset="0"/>
						</LinearGradientBrush>
					</Path.Stroke>
				</Path>
				<Path Stretch="Fill" Data="M5.467,28 L477.467,28" Grid.ColumnSpan="4" Margin="2,121.687,8,0" VerticalAlignment="Top" Height="1">
					<Path.Stroke>
						<LinearGradientBrush EndPoint="1,0.5" StartPoint="0,0.5">
							<GradientStop Color="#FF5E5E5E" Offset="0.641"/>
							<GradientStop Color="#FF424141" Offset="1"/>
							<GradientStop Color="#FF5E5E5E" Offset="0.421"/>
							<GradientStop Color="#FF424141" Offset="0"/>
						</LinearGradientBrush>
					</Path.Stroke>
				</Path>
				<Path Stretch="Fill" Data="M5.467,28 L477.467,28" Grid.ColumnSpan="4" Margin="2,186.687,8,0" VerticalAlignment="Top" Height="1">
					<Path.Stroke>
						<LinearGradientBrush EndPoint="1,0.5" StartPoint="0,0.5">
							<GradientStop Color="#FF5E5E5E" Offset="0.641"/>
							<GradientStop Color="#FF424141" Offset="1"/>
							<GradientStop Color="#FF5E5E5E" Offset="0.421"/>
							<GradientStop Color="#FF424141" Offset="0"/>
						</LinearGradientBrush>
					</Path.Stroke>
				</Path>
				<Slider Style="{DynamicResource SimpleSlider}" Height="Auto" SelectionStart="0" Maximum="5000" Visibility="Visible" IsEnabled="True" LargeChange="250" SmallChange="50" Grid.Column="1" Grid.ColumnSpan="2" x:Name="FilterSlider" ValueChanged="FilterSliderChanged" d:LayoutOverrides="Height" Margin="87.87,0,0,98.098" VerticalAlignment="Bottom"/>
				<TextBox Style="{DynamicResource SimpleTextBox}" Background="{DynamicResource ControlBackground}" BorderBrush="{DynamicResource ControlBorderColor}" Foreground="{DynamicResource FontColor}" Text="100" TextWrapping="Wrap" FontSize="13" Visibility="Visible" Grid.Column="3" x:Name="FilterTextbox" TextChanged="SliderTextboxChanged" Margin="8,0,8,95.135" VerticalAlignment="Bottom" Height="22"/>
				<CheckBox IsEnabled="True" Style="{DynamicResource SimpleCheckBox}" Content="Animate window filtering" Foreground="{DynamicResource FontColor}" Grid.ColumnSpan="3" x:Name="FilterCheckbox" Click="FilterCheckboxClick" Margin="8,0,61.367,124.058" VerticalAlignment="Bottom" Height="16"/>
				<TextBlock Width="Auto" Height="Auto" Grid.Column="1" Foreground="{DynamicResource FontColor}" Text="Duration (ms)" TextWrapping="Wrap" x:Name="FilterTextblock" d:LayoutOverrides="Width, Height" Margin="3,0,3,98.098" VerticalAlignment="Bottom"/>
				<Path Stretch="Fill" Data="M5.467,28 L477.467,28" Grid.ColumnSpan="4" Margin="2,0,8,147.371" VerticalAlignment="Bottom" Height="1">
					<Path.Stroke>
						<LinearGradientBrush EndPoint="1,0.5" StartPoint="0,0.5">
							<GradientStop Color="#FF5E5E5E" Offset="0.641"/>
							<GradientStop Color="#FF424141" Offset="1"/>
							<GradientStop Color="#FF5E5E5E" Offset="0.421"/>
							<GradientStop Color="#FF424141" Offset="0"/>
						</LinearGradientBrush>
					</Path.Stroke>
				</Path>
			</Grid>
			<Grid x:Name="AboutPanel" Margin="177.533,-0.058,0,0">
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="0.044*"/>
					<ColumnDefinition Width="0.181*"/>
					<ColumnDefinition Width="0.643*"/>
					<ColumnDefinition Width="0.132*"/>
					<ColumnDefinition Width="0*"/>
				</Grid.ColumnDefinitions>
				<Border HorizontalAlignment="Stretch" Margin="0,0,0,0" VerticalAlignment="Stretch" Background="#FF424141" BorderBrush="#FF8B8B8B" BorderThickness="1,1,1,1" CornerRadius="0,6,0,0" Padding="8,8,8,8" d:LayoutOverrides="GridBox" Grid.ColumnSpan="5"/>
				<TextBlock Margin="8,8,8,0" VerticalAlignment="Top" Height="24" Grid.ColumnSpan="3" FontSize="14" Foreground="{DynamicResource FontColor}" Text="SmatFlip" TextWrapping="Wrap"/>
				<TextBlock Height="24" Grid.ColumnSpan="3" FontSize="14" Foreground="{DynamicResource FontColor}" Text="Version 0.8 (beta2)" TextWrapping="Wrap" Margin="8,32,8,0" VerticalAlignment="Top"/>
				<TextBlock Height="24" Grid.ColumnSpan="3" FontSize="14" Foreground="{DynamicResource FontColor}" Text="Copyright (c) 2007 Lup Gratian" TextWrapping="Wrap" Margin="8,56.058,8,0" VerticalAlignment="Top"/>
			</Grid>
			<Grid x:Name="GeneralPanel" IsEnabled="True" Visibility="Visible" Margin="177.533,-0.058,0,0">
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="0.044*"/>
					<ColumnDefinition Width="0.181*"/>
					<ColumnDefinition Width="0.66*"/>
					<ColumnDefinition Width="0.115*"/>
					<ColumnDefinition Width="0*"/>
				</Grid.ColumnDefinitions>
				<Border HorizontalAlignment="Stretch" Margin="0,0,0,0" VerticalAlignment="Stretch" Background="#FF424141" BorderBrush="#FF8B8B8B" BorderThickness="1,1,1,1" CornerRadius="0,6,0,0" Padding="8,8,8,8" d:LayoutOverrides="GridBox" Grid.ColumnSpan="5"/>
				<Slider Style="{DynamicResource SimpleSlider}" Margin="74.163,0,8,120.392" Height="Auto" SelectionStart="0" Maximum="48" Visibility="Visible" IsEnabled="{Binding Path=IsChecked, ElementName=ExperimentalCheckbox, Mode=Default}" LargeChange="8" SmallChange="1" d:LayoutOverrides="Height" Grid.Column="1" Grid.ColumnSpan="2" Minimum="1" Value="1" x:Name="GlowSizeSlider" ValueChanged="OnGlowSizeChanged" TickPlacement="None" VerticalAlignment="Bottom"/>
				<TextBox Style="{DynamicResource SimpleTextBox}" Background="{DynamicResource ControlBackground}" BorderBrush="{DynamicResource ControlBorderColor}" Foreground="{DynamicResource FontColor}" TextWrapping="Wrap" Margin="0,0,8,116.058" FontSize="13" Visibility="Visible" Grid.Column="3" x:Name="GlowSizeTextbox" TextChanged="GlowSizeChangedTb" VerticalAlignment="Bottom" Height="22" IsEnabled="{Binding Path=IsChecked, ElementName=ExperimentalCheckbox, Mode=Default}"/>
				<CheckBox IsEnabled="True" Style="{DynamicResource SimpleCheckBox}" Content="Show window titles" Foreground="{DynamicResource FontColor}" Margin="8,0,61.367,174.058" Grid.ColumnSpan="3" x:Name="WindowTitleCheckbox" Click="WindowTitleClick" VerticalAlignment="Bottom" Height="16"/>
				<TextBlock Margin="3,0,21.77,148.098" Width="Auto" Height="Auto" Grid.Column="1" Foreground="{DynamicResource FontColor}" Text="Font size" TextWrapping="Wrap" IsEnabled="True" x:Name="FontSizeTextbox" d:LayoutOverrides="Height" VerticalAlignment="Bottom"/>
				<ComboBox IsEnabled="True" HorizontalAlignment="Left" Margin="74.163,0,0,144.726" Style="{DynamicResource SimpleComboBox}" Width="95.999" Background="#FF535353" BorderBrush="#FFFF0000" Foreground="{DynamicResource FontColor}" Grid.Column="1" Grid.ColumnSpan="2" IsSynchronizedWithCurrentItem="True" x:Name="FontSizeCombobox" VerticalAlignment="Bottom" Height="22">
					<ComboBoxItem Style="{DynamicResource SimpleComboBoxItem}" Content="8"/>
					<ComboBoxItem Style="{DynamicResource SimpleComboBoxItem}" Content="9"/>
					<ComboBoxItem Style="{DynamicResource SimpleComboBoxItem}" Content="10"/>
					<ComboBoxItem Style="{DynamicResource SimpleComboBoxItem}" Content="12"/>
					<ComboBoxItem Style="{DynamicResource SimpleComboBoxItem}" Content="14"/>
					<ComboBoxItem Style="{DynamicResource SimpleComboBoxItem}" Content="16"/>
					<ComboBoxItem Style="{DynamicResource SimpleComboBoxItem}" Content="18"/>
					<ComboBoxItem Style="{DynamicResource SimpleComboBoxItem}" Content="20"/>
					<ComboBoxItem Style="{DynamicResource SimpleComboBoxItem}" Content="22"/>
					<ComboBoxItem Style="{DynamicResource SimpleComboBoxItem}" Content="24"/>
					<ComboBoxItem Style="{DynamicResource SimpleComboBoxItem}" Content="32"/>
					<ComboBoxItem Style="{DynamicResource SimpleComboBoxItem}" Content="48"/>
				</ComboBox>
				<TextBlock Width="Auto" Height="Auto" Grid.Column="1" Foreground="{DynamicResource FontColor}" Text="Glow size" TextWrapping="Wrap" Margin="3,0,35.217,122.098" x:Name="GlowSizeTextbox1" d:LayoutOverrides="Width, Height, GridBox" VerticalAlignment="Bottom"/>
				<TextBlock Width="100.106" Height="Auto" Grid.Column="1" Foreground="{DynamicResource FontColor}" Text="Glow color" TextWrapping="Wrap" Grid.ColumnSpan="2" HorizontalAlignment="Left" Margin="3,0,0,92.766" x:Name="GlowColorTextbox" d:LayoutOverrides="Height" VerticalAlignment="Bottom" IsEnabled="{Binding Path=IsChecked, ElementName=ExperimentalCheckbox, Mode=Default}"/>
				<CheckBox IsEnabled="True" Style="{DynamicResource SimpleCheckBox}" Content="Show button panel" Foreground="{DynamicResource FontColor}" Grid.ColumnSpan="3" Margin="8,0,61.367,53.058" x:Name="ButtonPanelCheckbox" Click="ButtonPanelClick" VerticalAlignment="Bottom" Height="16"/>
				<CheckBox IsEnabled="True" Style="{DynamicResource SimpleCheckBox}" Content="Show reflection" Foreground="{DynamicResource FontColor}" Grid.ColumnSpan="2" Margin="3,0,40.006,33.058" Grid.Column="1" x:Name="ReflectionCheckbox" VerticalAlignment="Bottom" Height="16"/>
				<Path Stretch="Fill" Height="1" Data="M5.467,28 L477.467,28" Grid.ColumnSpan="4" Margin="2,33.214,8,0" VerticalAlignment="Top">
					<Path.Stroke>
						<LinearGradientBrush EndPoint="1,0.5" StartPoint="0,0.5">
							<GradientStop Color="#FF5E5E5E" Offset="0.641"/>
							<GradientStop Color="#FF424141" Offset="1"/>
							<GradientStop Color="#FF5E5E5E" Offset="0.421"/>
							<GradientStop Color="#FF424141" Offset="0"/>
						</LinearGradientBrush>
					</Path.Stroke>
				</Path>
				<Path Stretch="Fill" Data="M5.467,28 L477.467,28" Grid.ColumnSpan="4" Margin="2,0,8,75.871" VerticalAlignment="Bottom" Height="1">
					<Path.Stroke>
						<LinearGradientBrush EndPoint="1,0.5" StartPoint="0,0.5">
							<GradientStop Color="#FF5E5E5E" Offset="0.641"/>
							<GradientStop Color="#FF424141" Offset="1"/>
							<GradientStop Color="#FF5E5E5E" Offset="0.421"/>
							<GradientStop Color="#FF424141" Offset="0"/>
						</LinearGradientBrush>
					</Path.Stroke>
				</Path>
				<Button Margin="74.163,0,238.956,89.392" Style="{DynamicResource SimpleButton}" Content="Change" Grid.Column="1" HorizontalAlignment="Stretch" Background="#FFBC0000" Foreground="{DynamicResource FontColor}" Grid.ColumnSpan="2" x:Name="GlowColorChanger" Click="ColorChangerClicked" VerticalAlignment="Bottom" Height="22" IsEnabled="{Binding Path=IsChecked, ElementName=ExperimentalCheckbox, Mode=Default}"/>
				<Path Stretch="Fill" Data="M5.467,28 L477.467,28" Grid.ColumnSpan="4" Margin="2,0,8,195.344" VerticalAlignment="Bottom" Height="1">
					<Path.Stroke>
						<LinearGradientBrush EndPoint="1,0.5" StartPoint="0,0.5">
							<GradientStop Color="#FF5E5E5E" Offset="0.641"/>
							<GradientStop Color="#FF424141" Offset="1"/>
							<GradientStop Color="#FF5E5E5E" Offset="0.421"/>
							<GradientStop Color="#FF424141" Offset="0"/>
						</LinearGradientBrush>
					</Path.Stroke>
				</Path>
				<TextBlock Foreground="{DynamicResource FontColor}" Text="Screen amount used by SmartFlip" TextWrapping="Wrap" Grid.ColumnSpan="3" Width="180.523" HorizontalAlignment="Left" Margin="8,102.714,0,0" VerticalAlignment="Top" Height="24"/>
				<Slider Style="{DynamicResource SimpleSlider}" Height="Auto" SelectionStart="0" Maximum="100" Visibility="Visible" IsEnabled="True" LargeChange="25" SmallChange="1" Grid.Column="1" Minimum="1" Value="20" Grid.ColumnSpan="2" x:Name="ScreenAmountSlider" ValueChanged="OnScreenAmountChanged" d:LayoutOverrides="Height" Margin="74.163,127.772,8,0" VerticalAlignment="Top"/>
				<TextBox Style="{DynamicResource SimpleTextBox}" Background="{DynamicResource ControlBackground}" BorderBrush="{DynamicResource ControlBorderColor}" Foreground="{DynamicResource FontColor}" Text="100" TextWrapping="Wrap" FontSize="13" Visibility="Visible" Grid.Column="3" x:Name="ScreenAmountTextbox" TextChanged="OnScreenAmountTextChanged" Margin="0,123.695,8,0" VerticalAlignment="Top" Height="22"/>
				<TextBlock Foreground="{DynamicResource FontColor}" Text="Amount (%)" TextWrapping="Wrap" Width="Auto" Grid.Column="1" d:LayoutOverrides="GridBox" Margin="3,125.772,17.707,0" VerticalAlignment="Top" Height="16"/>
				<CheckBox IsEnabled="True" Style="{DynamicResource SimpleCheckBox}" Content="Run SmartFlip on Startup" Foreground="{DynamicResource FontColor}" Grid.ColumnSpan="3" x:Name="RunOnStartupCheckbox" Margin="8,8.058,61.367,0" VerticalAlignment="Top" Height="16"/>
				<TextBlock Foreground="{DynamicResource FontColor}" Text="Default window opacity" TextWrapping="Wrap" Grid.ColumnSpan="3" Width="180.523" HorizontalAlignment="Left" Margin="8,163.214,0,0" VerticalAlignment="Top" Height="24"/>
				<Slider Style="{DynamicResource SimpleSlider}" Height="Auto" SelectionStart="0" Maximum="255" Visibility="Visible" IsEnabled="True" LargeChange="25" SmallChange="1" Grid.Column="1" Minimum="0" Value="20" Grid.ColumnSpan="2" x:Name="WindowOpacitySlider" ValueChanged="WindowOpacityChanged_Slider" d:LayoutOverrides="Height" Margin="74.163,188.272,8,0" VerticalAlignment="Top"/>
				<TextBox Style="{DynamicResource SimpleTextBox}" Background="{DynamicResource ControlBackground}" BorderBrush="{DynamicResource ControlBorderColor}" Foreground="{DynamicResource FontColor}" Text="100" TextWrapping="Wrap" FontSize="13" Visibility="Visible" Grid.Column="3" x:Name="WindowOpacityTextbox" TextChanged="WindowOpacityChanged_Textbox" Margin="0,184.195,8,0" VerticalAlignment="Top" Height="22"/>
				<TextBlock Foreground="{DynamicResource FontColor}" Text="Opacity" TextWrapping="Wrap" Width="Auto" Grid.Column="1" d:LayoutOverrides="GridBox" Margin="3,186.272,17.707,0" VerticalAlignment="Top" Height="16"/>
				<TextBlock Foreground="{DynamicResource LightBorderBrush}" Text="Transparent" TextWrapping="Wrap" Width="67.344" Grid.Column="1" Grid.ColumnSpan="2" FontSize="10" HorizontalAlignment="Left" Margin="74.163,199.928,0,204.13"/>
				<TextBlock Foreground="{DynamicResource LightBorderBrush}" Text="Opaque" TextWrapping="Wrap" Grid.Column="2" FontSize="10" Width="67.344" TextAlignment="Right" HorizontalAlignment="Right" Margin="0,199.928,8,204.13"/>
				<TextBlock Foreground="{DynamicResource FontColor}" Text="Background opacity" TextWrapping="Wrap" Grid.ColumnSpan="3" Width="180.523" Height="24" HorizontalAlignment="Left" Margin="8,39,0,0" VerticalAlignment="Top"/>
				<Slider Style="{DynamicResource SimpleSlider}" Height="Auto" SelectionStart="0" Maximum="255" Visibility="Visible" IsEnabled="True" LargeChange="25" SmallChange="1" Grid.Column="1" Minimum="0" Value="20" Grid.ColumnSpan="2" x:Name="BackgroundOpacitySlider" Margin="74.163,64.058,8,0" VerticalAlignment="Top" ValueChanged="BackgroundOpacityValueChanged"/>
				<TextBox Style="{DynamicResource SimpleTextBox}" Background="{DynamicResource ControlBackground}" BorderBrush="{DynamicResource ControlBorderColor}" Foreground="{DynamicResource FontColor}" Text="100" TextWrapping="Wrap" FontSize="13" Visibility="Visible" Grid.Column="3" x:Name="BackgroundOpacityTextbox" TextChanged="BackgroundOpacityChanged" Height="22" Margin="0,59.981,8,0" VerticalAlignment="Top"/>
				<TextBlock Foreground="{DynamicResource FontColor}" Text="Opacity" TextWrapping="Wrap" Width="Auto" Grid.Column="1" Height="16" d:LayoutOverrides="GridBox" Margin="3,62.058,17.707,0" VerticalAlignment="Top"/>
				<TextBlock Foreground="{DynamicResource LightBorderBrush}" Text="Transparent" TextWrapping="Wrap" Width="67.344" Grid.Column="1" Grid.ColumnSpan="2" FontSize="10" Height="16" HorizontalAlignment="Left" Margin="74.163,75.714,0,0" VerticalAlignment="Top"/>
				<TextBlock Foreground="{DynamicResource LightBorderBrush}" Text="Opaque" TextWrapping="Wrap" Grid.Column="2" FontSize="10" Width="67.344" TextAlignment="Right" Height="16" HorizontalAlignment="Right" Margin="0,75.714,8,0" VerticalAlignment="Top"/>
				<Path Stretch="Fill" Height="1" Data="M5.467,28 L477.467,28" Grid.ColumnSpan="4" Margin="2,96.214,8,0" VerticalAlignment="Top">
					<Path.Stroke>
						<LinearGradientBrush EndPoint="1,0.5" StartPoint="0,0.5">
							<GradientStop Color="#FF5E5E5E" Offset="0.641"/>
							<GradientStop Color="#FF424141" Offset="1"/>
							<GradientStop Color="#FF5E5E5E" Offset="0.421"/>
							<GradientStop Color="#FF424141" Offset="0"/>
						</LinearGradientBrush>
					</Path.Stroke>
				</Path>
				<Path Stretch="Fill" Height="1" Data="M5.467,28 L477.467,28" Grid.ColumnSpan="4" Margin="2,156.214,8,0" VerticalAlignment="Top">
					<Path.Stroke>
						<LinearGradientBrush EndPoint="1,0.5" StartPoint="0,0.5">
							<GradientStop Color="#FF5E5E5E" Offset="0.641"/>
							<GradientStop Color="#FF424141" Offset="1"/>
							<GradientStop Color="#FF5E5E5E" Offset="0.421"/>
							<GradientStop Color="#FF424141" Offset="0"/>
						</LinearGradientBrush>
					</Path.Stroke>
				</Path>
			</Grid>
		</Grid>
		<Image Width="280" Height="38.058" Source="Resources/OptionsTitle.png" HorizontalAlignment="Left" Margin="13,17,0,0" VerticalAlignment="Top"/>
		<Button Style="{DynamicResource SimpleButton}" Content="Cancel" Background="#FF676767" Foreground="{DynamicResource FontColor}" HorizontalAlignment="Right" Margin="0,0,12,10" VerticalAlignment="Bottom" Width="72" Height="22" Click="CancelClicked"/>
		<Button Style="{DynamicResource SimpleButton}" Content="Save" Background="#FF676767" Foreground="{DynamicResource FontColor}" Width="72" Height="22" HorizontalAlignment="Right" Margin="0,0,92,10" VerticalAlignment="Bottom" Click="SaveClick"/>
		<Button Style="{DynamicResource SimpleButton}" Content="Reset settings" Background="#FF676767" Foreground="{DynamicResource FontColor}" Height="22" HorizontalAlignment="Left" Margin="8,0,0,10" VerticalAlignment="Bottom" Width="96" Click="ResetClicked"/>
	</Grid>
</Window>